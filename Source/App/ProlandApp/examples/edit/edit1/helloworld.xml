<!--
 * Proland: a procedural landscape rendering library.
 * Copyright (c) 2008-2011 INRIA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<!--
 * Proland is distributed under a dual-license scheme.
 * You can obtain a specific license from Inria: proland-licensing@inria.fr.
-->
<!--
 * Authors: Eric Bruneton, Antoine Begault, Guillaume Piolat.
-->
<?xml version="1.0" ?>
<archive>
    <multithreadScheduler name="defaultScheduler" nthreads="3" fps="0"/>

    <tileCache name="groundResiduals" scheduler="defaultScheduler">
        <cpuFloatTileStorage tileSize="197" channels="1" capacity="1024"/>
    </tileCache>
    <editResidualProducer name="groundResiduals1" cache="groundResiduals"/>

    <tileCache name="groundElevations" scheduler="defaultScheduler">
        <gpuTileStorage tileSize="101" nTiles="512"
            internalformat="RGB32F" format="RGB" type="FLOAT" min="LINEAR" mag="LINEAR"/>
    </tileCache>
    <editElevationProducer name="groundElevations1" cache="groundElevations"
        residuals="groundResiduals1" terrain="terrainNode"
        edit="terrainShader" brush="brushShader;"/>

    <tileCache name="groundNormals" scheduler="defaultScheduler">
        <gpuTileStorage tileSize="97" nTiles="512"
            internalformat="RG8" format="RG" type="FLOAT" min="LINEAR" mag="LINEAR"/>
    </tileCache>
    <normalProducer name="groundNormals1" cache="groundNormals" elevations="groundElevations1"/>

    <sequence name="cameraMethod">
        <foreach var="o" flag="dynamic" parallel="true">
            <callMethod name="$o.update"/>
        </foreach>
        <foreach var="o" flag="object" culling="true">
            <callMethod name="$o.draw"/>
        </foreach>
        <foreach var="o" flag="overlay">
            <callMethod name="$o.draw"/>
        </foreach>
    </sequence>

    <terrainNode name="terrain" size="50000" zmin="0" zmax="5000" splitFactor="2" maxLevel="16"/>

    <sequence name="updateTerrainMethod">
        <updateTerrain name="this.terrain"/>
        <updateTileSamplers name="this.terrain"/>
    </sequence>

    <sequence name="drawTerrainMethod">
        <setProgram>
            <module name="this.material"/>
        </setProgram>
        <drawTerrain name="this.terrain" mesh="this.grid" culling="true"/>
    </sequence>

    <texture2D name="font" source="text.png" internalformat="R8" min="LINEAR_MIPMAP_LINEAR" mag="LINEAR"/>

    <font name="basicFont" tex="font" nRows="8" nCols="12" minChar="32" maxChar="127" invalidChar="63" charWidths="19"/>

    <module name="textShader" version="330" source="textShader.glsl"/>

    <showInfo name="infoMethod" x="4" y="4" maxLines="4" fontSize="24" font="basicFont" fontProgram="textShader;"/>

    <showLog name="logMethod" x="4" y="-4" maxLines="32" fontSize="16" font="basicFont" fontProgram="textShader;"/>

    <drawTweakBar name="drawTweakBarMethod"/>

    <module name="upsampleShader" version="330" source="upsampleShader.glsl"/>

    <module name="normalShader" version="330" source="normalShader.glsl"/>

    <module name="terrainShader" version="330" source="terrainShader.glsl"/>

    <module name="initShader" version="330" source="initShader.glsl"/>

    <module name="brushShader" version="330" source="brushShader.glsl"/>

    <module name="composeShader" version="330" source="composeShader.glsl"/>

    <node name="terrainNode" flags="object,dynamic">
        <bounds xmin="-50000" xmax="50000" ymin="-50000" ymax="50000" zmin="0" zmax="5000"/>
        <field id="terrain" value="terrain"/>
        <tileSamplerZ id="elevation" sampler="elevationSampler" producer="groundElevations1" storeInvisible="false"/>
        <tileSampler id="fnormal" sampler="fragmentNormalSampler" producer="groundNormals1" storeParent="false" storeInvisible="false"/>
        <mesh id="grid" value="quad.mesh"/>
        <method id="update" value="updateTerrainMethod"/>
        <method id="draw" value="drawTerrainMethod"/>
        <module id="material" value="terrainShader"/>
    </node>

    <node name="scene">
        <node flags="camera">
            <method id="draw" value="cameraMethod"/>
        </node>

        <node name="t" value="terrainNode"/>

        <node flags="overlay">
            <method id="draw" value="drawTweakBarMethod"/>
        </node>
        <node flags="overlay">
            <method id="draw" value="logMethod"/>
        </node>
        <node flags="overlay">
            <method id="draw" value="infoMethod"/>
        </node>
    </node>

    <basicViewHandler name="viewHandler" viewManager="window"/>

    <tweakDem name="editDem" active="true"/>

    <tweakScene name="editScene" scene="scene" active="false"/>

    <tweakBarManager name="tweakBar" next="viewHandler">
        <editor id="scene" bar="editScene" exclusive="false"/>
        <editor id="dem" bar="editDem" key="e" exclusive="true"/>
    </tweakBarManager>

    <helloworld name="window" ui="tweakBar" view="viewHandler"/>

</archive>
