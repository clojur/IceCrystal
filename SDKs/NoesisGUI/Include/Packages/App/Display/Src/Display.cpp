////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsApp/Display.h>
#include <NsCore/TypeId.h>
#include <NsCore/Kernel.h>
#include <NsCore/ComponentFactory.h>
#include <NsCore/NsFactory.h>
#include <NsCore/ReflectionImplementEnum.h>
#include <NsCore/ReflectionImplementEmpty.h>


using namespace Noesis;
using namespace NoesisApp;


namespace
{
void* gPrivateData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetPrivateData(void* data)
{
    gPrivateData = data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void* Display::GetPrivateData()
{
    return gPrivateData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetTitle(const char*)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetLocation(int, int)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetSize(uint32_t, uint32_t)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetWindowStyle(WindowStyle)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetWindowState(WindowState)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetResizeMode(ResizeMode)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetShowInTaskbar(bool)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetTopmost(bool)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetAllowFileDrop(bool)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::SetWindowStartupLocation(WindowStartupLocation)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::Show()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Display::Close()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::LocationChangedT>& Display::LocationChanged()
{
    return mLocationChanged;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::SizeChangedT>& Display::SizeChanged()
{
    return mSizeChanged;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::StateChangedT>& Display::StateChanged()
{
    return mStateChanged;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::FileDroppedT>& Display::FileDropped()
{
    return mFileDropped;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::ActivatedT>& Display::Activated()
{
    return mActivated;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::DeactivatedT>& Display::Deactivated()
{
    return mDeactivated;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Noesis::Delegate<Display::RenderT>& Display::Render()
{
    return mRender;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::MouseMoveT>& Display::MouseMove()
{
    return mMouseMove;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::MouseButtonDownT>& Display::MouseButtonDown()
{
    return mMouseButtonDown;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::MouseButtonUpT>& Display::MouseButtonUp()
{
    return mMouseButtonUp;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::MouseDoubleClickT>& Display::MouseDoubleClick()
{
    return mMouseDoubleClick;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::MouseWheelT>& Display::MouseWheel()
{
    return mMouseWheel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::MouseWheelT>& Display::MouseHWheel()
{
    return mMouseHWheel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::ScrollT>& Display::Scroll()
{
    return mScroll;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::HScrollT>& Display::HScroll()
{
    return mHScroll;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::KeyDownT>& Display::KeyDown()
{
    return mKeyDown;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::KeyUpT>& Display::KeyUp()
{
    return mKeyUp;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::CharT>& Display::Char()
{
    return mChar;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::TouchDownT>& Display::TouchDown()
{
    return mTouchDown;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::TouchMoveT>& Display::TouchMove()
{
    return mTouchMove;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Delegate<Display::TouchUpT>& Display::TouchUp()
{
    return mTouchUp;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Ptr<Display> NoesisApp::CreateDisplay()
{
    ComponentFactory::Vector v;
    ComponentFactory* factory = NsGetKernel()->GetComponentFactory();
    factory->EnumComponents(NsSymbol("Display"), v);
    
    if (!v.empty())
    {
        return NsCreateComponent<Display>(v[0]);
    }

    NS_FATAL("Display implementation not found");
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NS_IMPLEMENT_REFLECTION_(Display)

////////////////////////////////////////////////////////////////////////////////////////////////////
NS_IMPLEMENT_REFLECTION_ENUM(ResizeMode)
{
    NsMeta<TypeId>("ResizeMode");

    NsVal("CanMinimize", ResizeMode_CanMinimize);
    NsVal("CanResize", ResizeMode_CanResize);
    NsVal("CanResizeWithGrip", ResizeMode_CanResizeWithGrip);
    NsVal("NoResize", ResizeMode_NoResize);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NS_IMPLEMENT_REFLECTION_ENUM(WindowState)
{
    NsMeta<TypeId>("WindowState");

    NsVal("Maximized", WindowState_Maximized);
    NsVal("Minimized", WindowState_Minimized);
    NsVal("Normal", WindowState_Normal);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NS_IMPLEMENT_REFLECTION_ENUM(WindowStyle)
{
    NsMeta<TypeId>("WindowStyle");

    NsVal("None", WindowStyle_None);
    NsVal("SingleBorderWindow", WindowStyle_SingleBorderWindow);
    NsVal("ThreeDBorderWindow", WindowStyle_ThreeDBorderWindow);
    NsVal("ToolWindow", WindowStyle_ToolWindow);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NS_IMPLEMENT_REFLECTION_ENUM(WindowStartupLocation)
{
    NsMeta<TypeId>("WindowStartupLocation");

    NsVal("Manual", WindowStartupLocation_Manual);
    NsVal("CenterScreen", WindowStartupLocation_CenterScreen);
    NsVal("CenterOwner", WindowStartupLocation_CenterOwner);
};
