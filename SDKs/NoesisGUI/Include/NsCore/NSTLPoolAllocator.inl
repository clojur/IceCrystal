////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


namespace eastl
{

////////////////////////////////////////////////////////////////////////////////////////////////////
PoolAllocator::PoolAllocator(const char*)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
PoolAllocator::PoolAllocator(const PoolAllocator&)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
PoolAllocator& PoolAllocator::operator=(const PoolAllocator&)
{
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void PoolAllocator::Init(Noesis::MemoryAllocator* allocator, uint32_t nodeSize, uint32_t nodeCount)
{
    mFixedAllocator.Initialize(allocator, nodeSize, nodeSize * nodeCount);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void PoolAllocator::Init(uint32_t nodeSize, uint32_t nodeCount)
{
    mFixedAllocator.Initialize(nodeSize, nodeSize * nodeCount);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void* PoolAllocator::allocate(size_t n, int)
{
    if (n == mFixedAllocator.GetBlockSize())
    {
        return mFixedAllocator.Allocate();
    }
    else
    {
        return mFixedAllocator.GetMemoryAllocator()->Alloc(n);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void* PoolAllocator::allocate(size_t n, size_t, size_t, int flags)
{
    return allocate(n, flags);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void PoolAllocator::deallocate(void* p, size_t n)
{
    if (n == mFixedAllocator.GetBlockSize())
    {
        mFixedAllocator.Deallocate(p);
    }
    else
    {
        mFixedAllocator.GetMemoryAllocator()->Dealloc(p);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Noesis::MemoryAllocator* PoolAllocator::GetMemoryAllocator() const
{
    return mFixedAllocator.GetMemoryAllocator();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool operator==(const PoolAllocator&, const PoolAllocator&)
{
    return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool operator!=(const PoolAllocator&, const PoolAllocator&)
{
    return true;
}

}
