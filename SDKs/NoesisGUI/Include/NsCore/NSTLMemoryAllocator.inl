////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsCore/Memory.h>
#include <NsCore/Error.h>


////////////////////////////////////////////////////////////////////////////////////////////////////
// nstl malloc allocator implementation
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace eastl
{

////////////////////////////////////////////////////////////////////////////////////////////////////
MemoryAllocator::MemoryAllocator(const char*): allocator(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
MemoryAllocator::MemoryAllocator(Noesis::MemoryAllocator* allocator_): allocator(allocator_)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
MemoryAllocator::MemoryAllocator(const MemoryAllocator& obj): allocator(obj.allocator)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
MemoryAllocator& MemoryAllocator::operator=(const MemoryAllocator& obj)
{
    allocator = obj.allocator;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void* MemoryAllocator::allocate(size_t n, int)
{
    NS_ASSERT(allocator != 0);
    return allocator->Alloc(n);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void* MemoryAllocator::allocate(size_t n, size_t, size_t, int flags)
{
    NS_ASSERT(allocator != 0);
    return allocate(n, flags);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void MemoryAllocator::deallocate(void* p, size_t)
{
    NS_ASSERT(allocator != 0);
    allocator->Dealloc(p);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool operator==(const MemoryAllocator& l, const MemoryAllocator& r)
{
    return l.allocator == r.allocator;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool operator!=(const MemoryAllocator& l, const MemoryAllocator& r)
{
    return l.allocator != r.allocator;
}

}
