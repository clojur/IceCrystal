////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


namespace Noesis
{

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
T* ObservableCollection<T>::Get(uint32_t index) const
{
    return NsStaticCast<T*>(Collection::Get(index));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void ObservableCollection<T>::Set(uint32_t index, T* item)
{
    Collection::Set(index, item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
uint32_t ObservableCollection<T>::Add(T* item)
{
    return Collection::Add(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
bool ObservableCollection<T>::Contains(T* item) const
{
    return Collection::Contains(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
int ObservableCollection<T>::IndexOf(T* item) const
{
    return Collection::IndexOf(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void ObservableCollection<T>::Insert(uint32_t index, T* item)
{
    Collection::Insert(index, item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void ObservableCollection<T>::Remove(T* item)
{
    Collection::Remove(item);
}

}
