////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef __GUI_PANEL_H__
#define __GUI_PANEL_H__


#include <NsCore/Noesis.h>
#include <NsGui/UIElementCollection.h>
#include <NsGui/FrameworkElement.h>


namespace Noesis
{

class ItemsControl;
class ItemContainerGenerator;
class RectangleGeometry;
struct ItemsChangedEventArgs;
struct GeneratorPosition;

NS_WARNING_PUSH
NS_MSVC_WARNING_DISABLE(4251 4275)

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Provides a base class for all Panel elements. Use Panel elements to position and arrange 
/// child objects.
///
/// http://msdn.microsoft.com/en-us/library/system.windows.controls.panel.aspx
////////////////////////////////////////////////////////////////////////////////////////////////////
class NS_GUI_CORE_API Panel: public FrameworkElement
{
public:
    NS_DISABLE_COPY(Panel)

    Panel();
    virtual ~Panel() = 0;

    /// Invalidates panel Z-order
    void InvalidateZOrder();

    /// Gets or sets panel background
    //@{
    Brush* GetBackground() const;
    void SetBackground(Brush* brush);
    //@}

    /// Gets or sets a value that indicates that this Panel is a container for user interface (UI) 
    /// items that are generated by an ItemsControl. 
    //@{
    bool GetIsItemsHost() const;
    void SetIsItemsHost(bool value);
    //@}

    /// Gets a value that represents the order on the z-plane in which an element appears
    static int32_t GetZIndex(const DependencyObject* element);
    /// Sets a value that represents the order on the z-plane in which an element appears
    static void SetZIndex(DependencyObject* element, int32_t value);

    /// Gets children collection
    /// \prop
    UIElementCollection* GetChildren() const;

public:
    /// Dependency properties
    //@{
    static const DependencyProperty* BackgroundProperty;
    static const DependencyProperty* IsItemsHostProperty;
    static const DependencyProperty* ZIndexProperty; // attached property
    //@}

protected:
    UIElementCollection* GetInternalChildren() const;

    void EnsureGenerator();
    ItemContainerGenerator* GetGenerator() const;

    // Creates children collection
    virtual Ptr<UIElementCollection> CreateChildrenCollection(FrameworkElement* logicalParent);

    // Generates item containers hosted in this panel
    virtual void GenerateChildren();

    // Updates children when items changed
    virtual void OnItemsChangedOverride(BaseComponent* sender,
        const ItemsChangedEventArgs& e);

    virtual void OnConnectToGenerator(ItemsControl* itemsControl);
    virtual void OnDisconnectFromGenerator();

    /// From DependencyObject
    //@{
    void OnInit();
    bool OnPropertyChanged(const DependencyPropertyChangedEventArgs& args);
    //@}

    /// From Visual
    //@{
    uint32_t GetVisualChildrenCount() const;
    Visual* GetVisualChild(uint32_t index) const;
    void OnVisualChildrenChanged(Visual* added, Visual* removed);
    //@}

    /// From UIElement
    //@{
    void OnRender(DrawingContext* context);
    //@}

    /// From FrameworkElement
    //@{
    void CloneOverride(FrameworkElement* clone, FrameworkTemplate* template_) const;
    uint32_t GetLogicalChildrenCount() const;
    BaseComponent* GetLogicalChild(uint32_t index) const;
    void OnTemplatedParentChanged(FrameworkElement* oldParent, FrameworkElement* newParent);
    //@}

private:
    /// Updates Z-order indirection vector taking into account children elements ZIndex
    void UpdateChildrenZOrder();

    void EnsureChildrenCollection(FrameworkElement* logicalParent);

    void ConnectToGenerator();
    void DisconnectFromGenerator();

    friend class ItemsControl;
    void Refresh();

    void OnItemsChanged(BaseComponent* sender, const ItemsChangedEventArgs& e);

    void OnAddItem(const GeneratorPosition& position, int numItems);
    void OnRemoveItem(const GeneratorPosition& position, int numContainers);
    void OnReplaceItem(const GeneratorPosition& position, int numItems, int numContainers);
    void OnMoveItem(const GeneratorPosition& from, const GeneratorPosition& to,
        int numContainers);
    void OnResetItems();

    static void StaticZIndexChanged(DependencyObject* sender,
        const DependencyPropertyChangedEventArgs& args);

private:
    // Collection of child elements of this panel
    Ptr<UIElementCollection> mInternalChildren;

    // Item container generator when Panel is the items host of an ItemsControl
    Ptr<ItemContainerGenerator> mItemContainerGenerator;

    Ptr<RectangleGeometry> mBackgroundGeometry;

    typedef NsVector<uint32_t> ZOrderVector;
    ZOrderVector mZOrder;

    bool mValidZOrder;

    NS_DECLARE_REFLECTION(Panel, FrameworkElement)
};

NS_WARNING_POP

}

#endif
